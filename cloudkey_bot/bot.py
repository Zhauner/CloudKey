import os
import base64
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup
from db_connect import SQLiteConnect
from PIL import Image
from io import BytesIO

storage = MemoryStorage()

bot = Bot(token=os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

db = SQLiteConnect('..\\cloudkey\\db.sqlite3')
is_login = False
current_user_id = 0


class LoginUser(StatesGroup):
    login = State()
    password = State()


@dp.message_handler(commands=['start'])
async def start_app(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = ['‚úÖ –õ–æ–≥–∏–Ω', 'üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞']
    keyboard.add(*start_button)
    await message.answer('üëã')
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ Cloud[Key]', reply_markup=keyboard)


@dp.message_handler(Text(equals='‚úÖ –õ–æ–≥–∏–Ω'), state=None)
async def login(message: types.Message):
    await LoginUser.login.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ email –æ—Ç —Å–∞–π—Ç–∞ Cloud[Key]')


@dp.message_handler(state=LoginUser.login)
async def login_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['login'] = message.text.strip()
    await LoginUser.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–∞–π—Ç–∞ Cloud[Key]')


@dp.message_handler(state=LoginUser.password)
async def password_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['password'] = message.text.strip()

    async with state.proxy() as data:
        user_id = db.pass_and_login_check(data['login'], data['password'])
        if user_id:
            global is_login
            global current_user_id
            is_login = True
            current_user_id = user_id

            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            start_menu = ['–ú–µ–Ω—é']
            keyboard.add(*start_menu)

            await message.answer(
                'üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üü¢',
                reply_markup=ReplyKeyboardRemove()
            )
            await message.answer('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"', reply_markup=keyboard)
        else:
            is_login = False
            current_user_id = 0
            await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω(email) –∏–ª–∏ –ø–∞—Ä–æ–ª—å ‚ùå')

    await state.finish()


@dp.message_handler(Text(equals='–ú–µ–Ω—é'))
async def menu(message: types.Message):
    if is_login and current_user_id != 0:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        menu_buttons = ['üî∂ –ú–æ–∏ –ø–∞—Ä–æ–ª–∏ (Cloud[Key]) üî∂', '–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã']
        keyboard.add(*menu_buttons)
        await message.answer('–≤—Å–µ –ø—É–Ω–∫—Ç—ã', reply_markup=keyboard)
    else:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')


@dp.message_handler(Text(equals='üî∂ –ú–æ–∏ –ø–∞—Ä–æ–ª–∏ (Cloud[Key]) üî∂'))
async def show_datas(message: types.Message):
    if is_login and current_user_id != 0:
        data = db.show_datas_by_id(current_user_id)
        for x in data:
            fav = Image.open(BytesIO(base64.b64decode(x[1])))
            fav.save("fav.png")
            img = open("fav.png", "rb")
            await message.answer_photo(img, caption=f'{x[-1]}')
            os.remove('fav.png')
    else:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')


@dp.message_handler(Text(equals='–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'))
async def logout(message: types.Message):
    global is_login
    global current_user_id
    if is_login and current_user_id != 0:
        is_login = False
        current_user_id = 0

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        again_button = ['/start']
        keyboard.add(*again_button)

        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í–æ–π—Ç–∏ —Å–Ω–æ–≤–∞', reply_markup=keyboard)
    else:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')


@dp.message_handler(Text(equals='üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞'))
async def check_login_user(message: types.Message):
    if is_login:
        await message.answer(f'–í—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –í–∞—à id: {current_user_id}')
    else:
        await message.answer(f'[+] not logg {current_user_id}')


executor.start_polling(dp, skip_updates=True)
